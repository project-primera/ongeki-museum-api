name: Auto Create Release and Build Image

on:
  pull_request:
    types: [closed]
    branches:
      - main  # mainブランチへのPRがマージされた時に実行

jobs:
  prepare-release:
    # PRがマージされた場合のみ実行
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'Release:')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}  # ステップの出力を参照
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得

      - name: Extract version from PR title
        id: extract_version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo $PR_TITLE | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "")

          if [ -z "$VERSION" ]; then
            # バージョン番号が見つからない場合、タイトルから抽出を試みる
            VERSION=$(echo $PR_TITLE | sed -n 's/.*Release: \(v[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' || echo "")

            # それでも見つからなければ、Releaseの後の文字列を使用
            if [ -z "$VERSION" ]; then
              VERSION=$(echo $PR_TITLE | sed -n 's/Release: \(.*\)/\1/p' | xargs || echo "")
            fi
          fi

          if [ -z "$VERSION" ]; then
            echo "Failed to extract version from PR title"
            exit 1
          fi

          # 環境変数に設定
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # ステップの出力として設定（ジョブの出力に使用）
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Create release notes
        id: release_notes
        run: |
          # PRの本文から情報を取得
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "$PR_BODY" > release_notes.md

          # 必要に応じてリリースノートをフォーマット
          # PRの本文がそのままリリースノートとして適さない場合、ここで加工

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 1

  update-version-and-build:
    needs: prepare-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}  # バージョン情報を出力
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'  # 必要な.NETバージョンを指定

      - name: Get release version
        id: get_version
        run: |
          # prepare-releaseジョブで設定されたバージョン情報を使用
          if [ -n "${{ needs.prepare-release.outputs.version }}" ]; then
            VERSION="${{ needs.prepare-release.outputs.version }}"
          fi

          # 環境変数に設定
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # ステップの出力として設定
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Find and update project files
        run: |
          # すべての.csprojファイルを検索
          find . -name "*.csproj" -type f | while read -r PROJECT_FILE; do
            echo "Updating version in $PROJECT_FILE to $VERSION"

            # VersionPrefixが存在するか確認し、存在すれば更新、なければ追加
            if grep -q "<VersionPrefix>" "$PROJECT_FILE"; then
              sed -i "s|<VersionPrefix>.*</VersionPrefix>|<VersionPrefix>$VERSION</VersionPrefix>|g" "$PROJECT_FILE"
            else
              # PropertyGroupの後にVersionPrefixを挿入
              sed -i "/<PropertyGroup>/a \    <VersionPrefix>$VERSION</VersionPrefix>" "$PROJECT_FILE"
            fi

            # 変更を確認
            echo "Updated content:"
            grep -A 1 -B 1 "VersionPrefix" "$PROJECT_FILE" || echo "VersionPrefix not found after update"
          done

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker image information
        id: docker_info
        run: |
          # リポジトリ名を取得（スラッシュやドットをハイフンに置き換え）
          REPO_NAME=$(echo ${{ github.repository }} | sed 's/.*\///' | tr '.' '-' | tr '[:upper:]' '[:lower:]')
          DOCKER_IMAGE="${{ secrets.DOCKER_REPOSITORY_NAME }}/$REPO_NAME"
          # 環境変数に設定
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
          # ステップの出力として設定
          echo "docker_image=$DOCKER_IMAGE" >> $GITHUB_OUTPUT
          echo "Docker image name: $DOCKER_IMAGE"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./OngekiMuseumApi
          file: ./OngekiMuseumApi/OngekiMuseumApi/Dockerfile
          push: true
          tags: |
            ${{ steps.docker_info.outputs.docker_image }}:latest
            ${{ steps.docker_info.outputs.docker_image }}:${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create summary
        run: |
          echo "## Build and Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** ${{ steps.docker_info.outputs.docker_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** latest, ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Updated Project Files:" >> $GITHUB_STEP_SUMMARY
          find . -name "*.csproj" -type f | while read -r PROJECT_FILE; do
            echo "- \`$PROJECT_FILE\`" >> $GITHUB_STEP_SUMMARY
          done

  create-release:
    needs: [prepare-release, update-version-and-build]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}  # ステップの出力を参照
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得

      - name: Get version from previous job
        id: get_version
        run: |
          # update-version-and-buildジョブで設定されたバージョン情報を使用
          VERSION="v${{ needs.update-version-and-build.outputs.version }}"

          # 環境変数に設定
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # ステップの出力として設定
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Create tag
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # タグが既に存在するか確認
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists. Skipping tag creation."
          else
            echo "Creating tag $VERSION"
            git tag $VERSION
            git push origin $VERSION
          fi

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # リリースが既に存在するか確認
          EXISTING_RELEASE=$(gh release view $VERSION 2>/dev/null || echo "")

          if [ -n "$EXISTING_RELEASE" ]; then
            echo "Release $VERSION already exists. Updating release."
            gh release edit $VERSION --notes-file release_notes.md
          else
            echo "Creating new release $VERSION"
            gh release create $VERSION --title "Release $VERSION" --notes-file release_notes.md
          fi

  merge-main-to-develop:
    needs: [prepare-release, update-version-and-build, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得
          ref: main  # mainブランチをチェックアウト

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Merge main into develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # developブランチが存在するか確認
          if git ls-remote --heads origin develop | grep develop; then
            echo "Merging main into develop branch"

            # developブランチをチェックアウト
            git checkout develop

            # mainブランチの変更をdevelopにマージ
            git merge --no-ff main -m "Merge main into develop after release ${{ needs.prepare-release.outputs.version }}"

            # developブランチをプッシュ
            git push origin develop

            echo "Successfully merged main into develop"
          else
            echo "develop branch does not exist. Skipping merge."
            exit 1
          fi

      - name: Add merge info to summary
        run: |
          echo "## Main to Develop Merge" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
